#+TITLE: /Writing GNU Emacs Extensions/ 学习笔记

* 定制Emacs

  全局快捷键设置方式：

  #+BEGIN_EXAMPLE
    (global-set-key 快捷键字符串 命令)
  #+END_EXAMPLE

  比如：

  #+BEGIN_SRC emacs-lisp
    (global-set-key "\M-?" 'help-command)
  #+END_SRC

  “\M-?”实际上是长度为1的字符串：

  #+BEGIN_SRC emacs-lisp :session
    (length "\M-?")
  #+END_SRC

  #+RESULTS[ad948aa7ef343a1cc218f8d9286e4323fa8c2f7b]:
  : 1

  解除默认禁用命令的方法为使用put函数：

  #+BEGIN_SRC emacs-lisp :session
    (put 'eval-expression 'disabled nil)
  #+END_SRC

  通过关键字查找命令或变量：

  #+BEGIN_EXAMPLE
    M-x apropos RET 关键字（可为多个） RET
  #+END_EXAMPLE

* 简单命令
  interactive函数中，如果交互调用函数小写p代表将参数解释为数字，如果无
  参数，将参数默认为1：

  #+BEGIN_SRC emacs-lisp :session
    (interactive "p")
  #+END_SRC

  大写P则是表示将参数解释为字符串，可使用prefix-numeric-value转换为数
  字。

  使用defalias可为函数另外取个名字，原来的的函数保持不变。如不容易将
  scroll-up和scroll-down函数搞混，可另外增加名字：

  #+BEGIN_SRC emacs-lisp :session
    (defalias 'scroll-ahead 'scroll-up)
    (defalias 'scroll-behind 'scroll-down)
  #+END_SRC

 - *file-symlink-p* ：可判断文件是否为软连接文件。
 - *buffer-read-only* ：将此值设置为t后，文件将不能编辑。
 - *find-file-hook* ：加载文件到buffer后调用的hook，buffer本地变量会先
   被处理。

   使用C-u提供前置参数时的不同解释：

   | 命令                   | 原值                 | 数值         |
   |------------------------+----------------------+--------------|
   | C-u 后跟数值（可为负） | 数字本身             | 数字本身     |
   | C-u - （后无数值）     | 符号-                | -1           |
   | C-u 持续n次            | 含数值4的n次方的链表 | 数值4的n次方 |
   | 无                     | nil                  | 1            |

* 综合多个命令

  - *point* ：返回光标所在位置。
  - *window-start* ：返回整个显示区域左上角字符的位置。
  - *goto-char* ：将光标置于指定位置，参数可为整数或marker。
  - *set-window-start* ：将指定位置显示下左上角。第一个参数为window对
    象，如果为nil表示当前窗口；第二个参数可为整数或marker。
  - *last-command* ：上一条命令。
  - *this-command* ：当前执行的命令，执行下一条命令时自动变为
    *last-command* 。

  每个symbol都有一个属性链表，可使用symbol-plist函数获取，添加和修改使
  用put函数，获取使用get函数：

  #+BEGIN_SRC emacs-lisp
    (symbol-plist 'foo)
    (put 'foo 'bar 1)                       ;添加
    (put 'foo 'bar nil)                     ;去除
  #+END_SRC

** marker
   相当于point不过只要指定值后，无论插入还是删除文本，其位置都不变，所
   以很影响性能，一般作法是不需要时去除：

   #+BEGIN_SRC emacs-lisp :session
     (set-marker m nil)
   #+END_SRC

   声明方法为先声明marker变量，在指定其对应的point：

   #+BEGIN_SRC emacs-lisp :session
     (defvar m (make-marker))
     (set-marker m (point))
   #+END_SRC

* 查找和修改

   - *current-time-string* ：返回当前时间的字符串。很不灵活。
   - *current-time* ：返回当前时间的原始值。
   - *format-time-string* ： 指定模板，将current-time返回的时间原始值
     转换为字符串。模板中占位符同命令行命令date相同。
   - *defvar* ：如果文档字符串首字母为星号（*），表示可随时修改，即通
     过set-variable实现交互式赋值，且如果赋值为字符串，可不加双引号。
   - *interactive* ：如果参数字符串第一个字符为星号（*）表示不能在自读
     文件中编辑。

   函数执行时保留原来信息的宏：

   - *save-restriction* ：保留widen/narrow状态。
   - *save-excursion* ：保留光标位置。
   - *save-match-data* ：保留原来正则匹配的信息不变。由于所有正则匹配
     结果都会添加到一个对象上，所以在改变此对象的操作中很有用。
   - *widen* ：还原原来narrowed后的显示状态。

   搜索匹配：

   - *search-forward* / *search-backward* ：从光标当前位置搜索第一个字
     符串参数指定的内容。如果搜索成功，将光标置于匹配内容后，且返回该
     位置。

     第二个可选参数，表示搜索范围，如果指定，则只能在该位置前搜索；如
     果为nil，则表示最多个搜索到文本末尾。

     第三个可选参数，表示是否报告错误，如果为nil，搜索失败只是返回nil；
     如果为t，则搜索失败后返回错误，不进行后面的命令。

     第四个可选参数，表示匹配个数。如果为数值，表示搜索匹配个数，如果
     为负数则表示向后搜索匹配个数。

   - *re-search-forward* / *re-search-backward* ：与search-forward的用
     法完全相同，只是第一个参数可为正则表达式。

   - *regexp-quote* ：将字符串转换为正则字符串，主要功能为去除原字符串
     中的特殊字符。

   - *match-beginning* ：第一个参数数字，为上个搜索中匹配正则表达式中的括号
     位置，即正则的反向引用。如果为0，则表示整个搜索的起始位置。

   - *replace-match* ：替换上个正则搜索时匹配的内容。

     - 第一个参数为替换内容。
     - 第二个参数表示是否修饰大小写，如果为non-nil则将替换内容的大小写
       形式尽量转换为和原来字符相同。
     - 第三个参数表示是否使用第一个参数的原有形式，如果为nil，见文档:smile:。
     - 第四个参数如果为字符串，则是替换此字符串，而非buffer中匹配的内
       容。
     - 第五个参数为整数，表示替换原文本中匹配正则的反向引用位置，而非
       整个匹配区域。

* 配置文件
  - *load-path* ：所有配置文件绝对路径组成的字符串链表。
  - *load-file* ：交互式加载配置文件。
  - *load-library* ：？？？。
  - *require* ：加载模块。在load-path所指定的路径中寻找与其参数相同的
    文件名，并加载，如果已经加载则忽视。加载原则为，如果相同路径下同
    名.elc的文件，则先加载此文件，如果无才加载.el文件。
  - *provide* ：如果配置文件需要被require加载，该文件中需声明provide。
    且一般在最后，这样可让require在加载是如果发现配置文件中有错误，则
    决绝加载该配置。
  - *byte-compile-file* ：编译配置文件。
  - *byte-compile-directory* ：编译配置文件夹。
  - *eval-after-load* ：在某特性加载后才执行。比如希望修改dired中的
    dired-sort-toggle函数，只有在加载该模块后才能实现：

  #+BEGIN_SRC emacs-lisp :session
    (eval-after-load
        "dired"
      (defun dired-sort-toggle()
        ""
        ))
  #+END_SRC

* 链表
  *nthcdr* ：返回链表的第N个cdr结果：
  
  #+BEGIN_SRC emacs-lisp :session
    (nthcdr 3 '(1 2 3 4))
  #+END_SRC
  
  #+RESULTS[56d2a3ee0abf66492dcb8a84b495ac01878cf0a7]:
  : (4)
  
  *eq* 和 *equal* ：不同于commom lisp，Elisp中只有这两个相等比较操作符。
  其中eq表示两个对象是内存意义上完全相同的对象，而equal则是表示看起来
  相同的两个对象。
  
  历遍assoc链表时，如果需更改原来数据，可使用setcdr函数直接修改，以提
  升效率，如下面的函数定义：
  
  #+BEGIN_SRC emacs-lisp :session
    (defun alist-replace(alist key new-value)
      (let ((sublist (assoc key alist)))
        (when sublist
          (setcdr sublist new-value))))
  #+END_SRC
  
* Minor Mode
  
  - *beginning/end-of-defun* C-M-a/e：跳转到定义首/末。
    
  Fundamental Mode是最基础的Major Mode，里面无任何特性。
  
* 执行和报错
* major mode
* 一个完整的例子
