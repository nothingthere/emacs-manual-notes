#+TITLE: 《Emacs Manual》学习笔记
# ------------------------------------------------- *粗略描述，不理解的问题阅读后文后尝试解决*
* 显示界面组织
  /frame/ ：整个Emacs占据的图像窗口，或terminal屏幕。
** point
   *光标实际所在位置为，所处字符前。*
** echo区域
   | C-x = | 显示光标所在处字符的信息 |

   echo区域显示提示信息和警告等信息。通常显示速度很快，如需查看，都在
   *Message*中。

   *Message*buffer中可见信息条数，可通过变量message-log-max变量控制。
** 模式行
   模式行位于echo区域上方，其中的字符格式为：

   cs:ch-fr buf pos line (major minor)

   各部分字符的含义为：
   - cs: 由4个字符组成：
	 1. codeing system，字符系统。'-'表示无特殊字符处理，'='表示no
        conversion?，'1'表示ISO Latin-1。
	 2. 键盘输入字符系统。
	 3. 命令行输出字符系统。
	 4.
   - ch：'--'表示buffer内容与磁盘文件内容一致，'\*\*'表示文件未保存，'%%'表
     示未修改过的自读文件，'%\*'表示未保存的自读文件。
   - ch后的字符：一般为'-'，如果当前buffer为远程文件内容，以'@'标记。
   - fr：Frame的名称，起始frame以'F1'表示。
   - pos：当前行在整个buffer中的位置。
   - line：当前行数。可通过column-number-mode函数实现显示当前列数。
   - major minor：当前的major模式。只有1个; minor：当前的minor模式，
     可有多个。
	 一些与模式(mode)不相关的内容有时也会出现在此括号内，如'Narrowed'表
     示只显示部分buffer文本。当使用处于递归编辑状态时，外层还会包裹方
     括号。
** 菜单栏
   在命令行环境中，可通过ttm-menubar打开菜单。
* 字符、按键和命令
** 可输入的内容
   Emacs将键盘上的字符分为3类：
   1. 直接输入类，如'a' 'b' '3'等。
   2. 控制字符，如RET TAB DEL ESC F1 Home等。
   3. 修饰字符Ctrl和Meta，用来执行命令。

   图形界面上通过鼠标实现的行为，成为 /输入事件/ 。

** 组合键
   组合键分为 /前缀键/ 如C-c和C-x, /完整键/ 如C-f和C-g。组合键要么是前
   缀键，要么是完整键。

   常用的前缀键有：C-c, C-h, C-x, C-x RET, C-x @, C-x a, C-x n, C-x r,
   C-x v, C-x 4, C-x 5, C-x 6, ESC, M-g和M-o。
** 按键和命令
   每个有效快捷键都对应一个命令，即elisp函数。
   # -------------------------- *？？？*
* 进入和退出Emacs
** 进入Emacs
   将变量 *inhibit-startup-screen* 设置为non-*nil* 值，可禁用初次进入Emacs时
   的说明页面。

   通过设置 *initial-buffer-choice* 变量，可指定启动Emacs时默认打开的文件/
   文件夹。

** 退出Emacs
   | C-x C-c | (*save-buffers-kill-terminal*)，退出emacs |
   | C-z     | (*suspend-emacs*)，最小化emacs            |

   将 *confirm-kill-emacs* （默认为nil）设置为判断函数，可实现退出emacs前再次确认，
   如 *yes-or-no-p* 。

   如果直接退出Emacs，可执行命令 *kill-emacs*。

* 基本编辑命令
** 文本插入
   使用 *auto-fill-mode* 可将过长的行自动换行。行数由变量
   *fill-column* 变量控制。
*** 输入特殊字符
   	使用 *quote-insert* (C-q)可输入特殊字符，如C-c。

	不仅可通过特殊键输入，还可使用字母编码数字输入，如“C-q 1 0 1 B”的
	输入结果为"AB"；编码 的进制可通过 *read-quoted-char-radix* 变量控
	制。

	还可使用 *insert-char* (C-x 8 RET) 选择输入特殊字符。如：

	C-x 8 <RET> infinity <RET>

	C-x 8 <RET> 221e <RET>
** 改变光标位置
   | C-f              | *forward-chae*                   | 向前移动一个字符                   |
   | <RIGHT>          | *right-char*                     | 同上，不过在右->左语言环境下有区别 |
   | C-b              | *backward-char*                  | 向右移动一个字符                   |
   | <LEFT>           | *left-char*                      | 同上，不过在右->左语言环境下有区别 |
   | C-n <DOWN>       | *next-line*                      | 下一行，列数不变                   |
   | C-p <UP>         | *previous-line*                  | 上一行，列数不变                   |
   | C-a <Home>       | *move-beginning-of-line*         | 移至行首                           |
   | C-e <End>        | *move-end-of-line*               | 移至行尾                           |
   | M-r              | *move-to-window-line-top-bottom* | 在窗口的上中下3个位置移动          |
   | M-<              | *beginning-of-buffer*            | 移至buffer最前                     |
   | M->              | *end-of-buffer*                  | 移至buffer最后                     |
   | C-v              | *scroll-up-command*              | 向下翻页                           |
   | M-v              | *scroll-down-command*            | 向上翻页                           |
   | M-g c            | *goto-char*                      | 移至buffer的第N个字符处            |
   | M-g g 或 M-g M-g | *goto-line*                      | 移至第N行                          |
   | M-g <TAB>        | *move-to-column*                 | 移至当前行的第N列                  |
   | C-x C-n          | *set-goal-column*                | 设置以后移上下移动时，都在当前列   |
   | C-u C-x C-n      |                                  | 取消C-x C-n设置的全局列数          |

   光标移动时有 /逻辑行/ 和 /可见行/ 的区别。C-p和C-n命令默认使用 /可
   见行/，如需使用 /逻辑行/ ，需设置 *line-move-visual* 值为nil。

   当C-n命令移至最后一行后，再执行该命令就无作用。如果将变量
   *next-line-add-newlines* 设置为non-line，可添加新行。

** 文本剪切
   | <BACKSPACE> | *delete-backward-char* | 删除前面一个字符                         |
   | <Delete>    | *delete-forward-char*  | 删除后面一个字符。如果有选中区域，则删除 |
   | C-d         | *delete-char*          | 删除后面一个字符，不管有无选中区域。     |
   | C-k         | *kill-line*            | 剪切至行末                               |
   | M-d         | *kill-word*            | 剪切后面一个单词                         |
   | M-<DEL>     | *backward-kill-word*   | 剪切至前面一个单词                       |

** Undo（返回）
   C-/、C-x u和C-_ 等价。
** 文件操作
   | C-x C-f | *open-file*   | 打开文件   |
   | C-x C-s | *save-buffer* | 保存buffer |

** 获取帮助
   获取帮助的快捷键都以C-h开头，如C-h k *describe-key*，获取快捷键
   帮助。

** 空白行
   - C-o *open-line* ：插入新行，光标位置保持不变。
   - C-x C-o *delete-blank-lines* ：删除空行：
	 - 如果有多个空行，仅保留1个。
	 - 如果只有1个空行，将其删除。
	 - 如果当前不是空行，删除后面的所有空行。

** 逻辑行延续
   如果某行过长不能完全显示，Emacs会在末尾使用'\'表示为逻辑换行。如果
   不逻辑换行，只在单行显示，就在末尾使用'$'标记。

   对行的操作命令除C-p和C-n外，都默认针对逻辑行，而非显示行。
** 光标所在处信息
   - *what-line* ：显示当前行数。

	 虽然状态栏也会显示当前行数，但此命令会提示buffer是否被Narrowed。
   - *line-number-mode* 和 *column-number-mode* ：显示/关闭状态栏的行
     数和列数。
   - *cound-words-region* M-=：显示选中区域的行数、单词数和字符数。

	 如果带参数执行此命令，即C-u M-=，则针对整个buffer。
   - *count-words* ：显示整个buffer的行数、单词数和字符数。如果有选中
     文本，则相当于 *count-words-region* 。
   - *what-cursor-position* C-x =：显示光标后面一个字符的位置和列数。

	 显示格式为：
	 Char: c (99, #o143, #x63) point=28062 of 36168 (78%) column=53

	 其含义为：
	 Char: 字符 (10进制, 8进制, 16进制) point=buffer中的位置 of 整个
	 buffer的字符数 (以百分比占的位置) column=列数。

	 如果整个buffer被Narrowed，会有额外信息：<Narrowed后的位置，Widden后的
     位置>。
   - *hl-line-mode* ：高亮/不高亮显示当前行。
   - *size-indication-mode* ：显示/不显示当前buffer的大小。

** 数字参数
   传递数字参数最简单的方式是使用<Meta>键，如M-5 C-n为向下移动5行。

   如果参数是负数，则使用M--，不传数字是 /一般/ 默认为-1。

   M-5 0 C-n不是先插入5个0，再向下移动一行，实际的作用时向下移动50行。
   M-5 C-u 0，才是插入5个0，此处C-u的作用为取消前面的数字参数。

   - *universal-argument* C-u：也可传递数字参数，不跟数字的负号默认为-1。

	 还有一项功能就是将后面的命令重复4次。如C-u C-n为向下移动4行，C-u
     C-u C-n为向下移动16行。

	 如果要重复输入插入字符，可跟数字参数，如C-u 6 0 a为输入60个a；如
     果要重复输入60个0，则为C-u 6 0 C-u 0。

	 一些命令需要有参数，单会忽略参数值如M-q *fill-paragraph* 。

	 一些命令将数字参数作为重复次数，单没有参数时则效果不同。如C-k
     *kill-line* ，带数字参数时删除行时，会顺带删除后面的换行符，即不
     留空行。

   # -------------------------- *需边学习变练习，直到熟练为止*

** 重复命令
   如“M-x COMMAND-NAME <RET>”这类命令，可通过C-u传入参数指定重复次数，
   但如果这些命令需输入内容，此方法就不能生效。

   这时需用C-x z *repeat* 命令重复，如需传入参数，默认使用上一条命令的
   参数。

   如使用了命令C-u 2 0 C-d删除了20个字符，这时再使用C-x z z z就可删除
   后面60个字符。
* minibuffer
  minibuffer的作用是输入复杂命令，如文件名、buffer名、命令名称或Lisp表
  达式。
** 基本使用方法
   使用'minibuffer-prompt'高亮。

   <RET>提交输入，C-g取消输入。

   *minibuffer-electric-mode* 还没理解？？？

   由于minibuffer与echo区域公用一个窗口，当输入内容时，如果有报错或提
   示信息，将立即显示，只有继续输入时才是再次启动minibuffer。
** 输入文件名
   使用C-x C-f *find-file* 打开文件时，输入文件名有一下快捷方式：
   - “..” 代表上一级文件夹。如"a/b/../foo.el"的实际含义为"a/foo.el"。
   - “/” 表示忽略前面的所有内容。如"/a/b//etc/termcap"的实际含义为
     "/etc/termcap"。

	 可使用 *file-name-shadow-mode* 打开/关闭此项功能。
   - "~" 表示home目录，如“~/emma.txt”。所有"~"之前的内容会被忽略。
   - 可使用C-a C-k删除所有默认文件路径。

   将变量 *insert-default-directory* 设置为nil时，提示输入文件名时不会
   有默认内容，不过相对当前文件的路径依然有效。
** 在其中编辑
   由于在minibuffer中<RET>表示提交，要输入新行，需使用C-q C-j或C-o
   *open-line*。

   minibuffer，可同普通窗口一样使用编辑命令。如使用C-a C-k删除行；还可
   与普通编辑窗口间来回跳转，相互剪切/粘贴文本等。不过也有限制，不如不
   可分屏。

   *resize-mini-windows* 变量可控制minibuffer的大小变化，取值可为：
   - grow-only：当添加新行时，自动变高。
   - t：当减少行后，还会变矮。
   - nil：一直不改变高度。

   *max-mini-window-height* 变量可控制minibuffer高矮变化时的最大高度：
   - 浮点数：表示占整个窗口的百分比。
   - 整数：表示行数。
   - nil：不自动改变高度。

   可使用C-M v *scroll-other-window* 命令向下滚动“另一个”窗口。
** 补全
*** 例子
	使用补全方式输入"M-x auto-fill-mode <RET>"的方式为：

	"M-x a u <TAB> - f <TAB>"。
*** 命令
	- *minibuffer-complete* <TAB>：尽量补全，如不能补全则列出备选。
	- *minibuffer-complete-word* <SPC>：补全光标处的单词，对有空格的参
      数无效，如文件名。
	- *minibuffer-complete-and-exit* <RET>：提交命令，可能在提交前补全。
	- *minibuffer-complete-help* ?：列出所有备选。
	- *switch-to-completion* M-v：跳转到备选窗口。在此窗口中的操作有：
	  1. *choose-completion* <RET>：选中。
	  2. *next-completion* <RIGHT>：下一条。
	  3. *previous-completion* <LEFT>：上一条。
*** 退出
	使用 *minibuffer-complete-and-exit* 命令提交命令时，可能有以下4种
	行为：
	- "strict completion"：只接受匹配补全的命令，即存在的命令或立即补
      全后存在的命令。如果不匹配，则保留在minibuffer内，显示提示信息，
      此时可使用C-g退出。

	  比如输入“M-x”后直接回车。

	- "cautious completion"：同上一类型相同，唯一的区别是当可立即补全
      时，仅补全，不提交命令，需手动使用<RET>提交。

	  比如只读取已存在的文件名。

	- “permissive completion”：允许各种输入，备选列表只做建议。输入
      <RET>不补全，仅提交。

	- "permissive completion with confirmation"：??

	可通过设置 *confirm-noexistence-file-or-buffer* 改变确认（confirm）
	行为：
	- 默认值为after-completion，即上面的行为。
	- nil，不提示确认，即"permissive completion"。
	- 其它non-nil值，询问上一条命令是否为<TAB>。？？？

*** 如何选择补全备选
	Emacs通过变量 *completion-styles* 中的类型依次选择备选，如果前一种
	不能获取备选尝试后一种，直到找到为止。备选类型依次有：
	- basic：匹配与光标前完全相同的的内容。如果光标后有文本，将其作为
      补全后的子字符串。
	- partial-completion：将空格或'-'隔开的单词分别补全。如将"em-l-m"
      补全为"emacs-lisp-mode"。

	  此外将"*"作为通配符，匹配任意字符。
	- emacs22：同“basic”方式相同，只是会忽略光标后的文本。

	下面还有2种方式，可将其添加到 *completion-styles* 中:
	- substring：备选需匹配光标前的文本加光标后的文本。比如minibuffer
      中只有文本"foobar"，且光标在"foo"与"bar"之间，备选可为
      "AfooBbarC"，其中A、B、C可为任意文本（空字符串也可）。
	- initials：如将"lch"匹配为"list-command-history"。

	可通过设置 *completion-category-overrides* 实现在不同环境中使用不
	同补全方式。
*** 配置
	- 大小写：补全会区分大小写，如"AU"不会出现"auto-fill-mode"的备选。

	  - *read-file-name-completion-ignore-case* ：设置读取文件名时是否
        区分大小写。在文件系统区分大小写的系统中默认为nil，如Unix；在
        文件系统不区分大小写的系统中默认为non-nil，如Windows。

	  - *read-buffer-completion-ignore-case* ：同上，不过针对的是buffer
        名称。
	- 忽略文件：通过设置变量 *completion-ignored-extensions* 变量来过
      滤文件名。文件后缀名在此链表变量中的文件会被忽略。

	  当所有备选文件都被忽略时，就都不忽略。

	  当列出备选时，Emacs会忽略此变量。
	- *completion-auto-help* ：当设置为nil时，只有输入"?"时才列出备选。
      当设置为'lazy时，只有第2此使用<TAB>时才列出备选。
	- *completion-cycle-threshold* ：当设置为non-nil时，使用<TAB>时逐
      个循环最匹配补全。如果为数字N时，仅在只有<=N个备选时才循环。
** 历史命令
   - *previous-history-element* M-p：上一条历史命令。
   - *next-history-element* M-n：下一条历史命令。
   - *previous-match-history* M-r REGEXP：满足REGEXP的上一条历史命令。
   - *next-match-history* M-s REGEXP：满足REGEXP的下一条历史命令。

   - *history-length* ：历史命令存储的最大个数，如果为t表示无上限。
   - *history-delete-duplicates* ：是否删除重复历史命令中重复的条目，
     如果为non-nil，删除原有命令中与当前命令相同的条目。
** 重复执行命令
   每条用“M-x”形式执行的命令都存储在 *command-history* 变量中。
   - *repeat-complex-command* C-x <ESC> <ESC>：重复执行上条使用"M-x"执
     行的命令。

	 使用此命令后对应的lisp表达式会显示在minibuffer内，可直接使用<RET>
     执行，也可编辑后执行。

	 可使用M-p和M-n在历史命令中选择。

	 可将变量 *isearch-resume-in-command-history* 设置为non-nil值，实
     现反向搜索。
   - *list-command-history* ：列出所有变量 *command-history* 中保存的
     命令。
** 密码
   当需输入密码时（如打开远程文件），输入的内容会显示为“.”，且不会记录
   输入密码这条历史命令。除下列编辑命令外，minibuffer中的任何编辑命令
   都不可用：
   - <DEL>：删除字符
   - C-u：清空已输入的密码
   - C-g：放弃
   - C-y：粘贴
   - <ECS>或<RET>：提交密码
** yes-or-no提示
   对需确认的操作，Emacs会提示是否执行，在minibuffer中显示"yes-or-no"
   字样。如文件另存为命令C-x C-w *write-file* 。

   由于也是在minibuffer中，所以所有minibuffer相关的命令都可用，如C-v和
   M-v翻页，M-p和M-n选择等。
* 使用函数名执行命令
  每一个Emacs命令都有一个名字，即函数名，除绑定快捷键的命令外，都只能
  使用命令M-x *execute-extended-command* 命令执行。

  如需不提示命令对应的快捷键，可将变量 *suggest-key-bindings* 设置为nil。
* Help
  如果想查找Emacs的某种特性，还不直到它叫什么和哪里去找，一般的查找顺
  序为：
  1. 尝试apropos-command命令。
  2. 查看手册索引。
  3. 查看FAQ。
  4. 同包关键字查找。

  具体的命令为：
  - C-h a TOPIC *apropos-command* ：通过输入关键字，查找相应命令。可以
    是多个关键字。
  - C-h i d m emacs <RET> i TOPIC <RET>：查看Emacs Info手册中有TOPIC索
    引的条目，使用','查看下一条匹配结果。
  - C-h i d m emacs <RET> s TOPIC <RET>：同上一个命令相同，不过匹配文
    本中有TOPIC的章节。
  - C-h C-f *view-emacs-FAQ* ：显示Emacs的FAQ页面。
  - C-h p *finder-by-keyword* ：通过关键字查找插件说明。

** 获取帮助命令概览（按字母顺序排序）
   - C-h a TOPIC *apropos-command* ：列出命令含TOPIC的命令。

	 如果是多个关键字，结果会至少满足2个其中的关键字。也可使用正则表达
     式。通常使用的关键字如下：

	 char, line, word, sentence, paragraph, region, page, sexp, list,
     defun, rect, buffer, frame, window, face, file, dir, register,
     mode, beginning, end, forward, backward, next, previous, up, down,
     search, goto, kill, delete, mark, insert, yank, fill, indent, case,
     change, set, what, list, find, view, describe, default.

	 如果变量 *apropos-do-all* 值为non-nil，结果会更多，不过搜索速度也
     相应变慢。

	 除 *apropos-documentation* 命令外，所有apropos命令执行结果都按字
     母顺序排序，如果需按相关度排序，需将变量 *apropos-sort-by-scores*
     设置为non-nil。 *apropos-documentation* 执行结果默认按相关度排序，
     如需按字母顺序排序，可设置 *apropos-documentation-sort-by-scores*
     设置为nil。

   - C-h b *describe-bindings* ：列出所有有效快捷键，排序顺序为
     minor-mode -> major-mode -> 全局绑定。
   - C-h c KEY *describe-key-briefly* ：简单描述快捷键KEY，如需更详细
     信息，可使用C-h k快捷键。
   - C-h d TOPIC *apropos-documentation* ：描述文档内有TOPIC的函数和变
     量。
   - C-h e *view-echo-area-message* ：显示*Message*buffer。
   - C-h f FUNCTION *describe-function* ：描述函数。
   - C-h h *view-hello-file* ：显示"HELLO"文件，查看语言支持。
   - C-h i *info* ：运行Info程序，查看内置文档。

	 如需打开两个Info程序，需在C-h i前添加数字参数。

   - C-h k *describe-key* KEY：查看快捷键KEY对应命令的文档。
   - C-h l *view-lossage* ：查看前最近300个按键输入。

	 当误输入一些命令，导致Emacs崩溃后，可通过此命令查看输入过的所有内
     容。

   - C-h m *describe-mode* ：描述当前mode。
   - C-h n *view-emacs-new* ：查看当前版本的Emacs改进。
   - C-h p *finder-by-keyword* ：按类型列出插件。
   - C-h P PACKAGE *describe-package* ：显示PACKAGE的文档。
   - C-h r *info-emacs-manual* ：阅读Emacs内置手册。
   - C-h s *describe-syntax* ：显示当前“语言表（syntax table）”。即哪
     个字符为分隔符，哪个字符为单词的一部分等。？？？
   - C-h t *help-with-tutorial* ：进入Emacs的内置交互式入门教程。
   - C-h v VAR *describe-variable* ：显示变量VAR的文档。
   - C-h w COMMAND *where-is* ：显示哪个快捷键可执行命令COMMAND。

	 C-h c为显示快捷键的简略信息，C-h k为显示快捷键对应函数的文档，C-h
     K为进入Info中有关快捷键的节点，而C-h w为列出与命令相关的快捷键。

   - C-h C *describe-codeing-system* ：查看“Coding system（编码系
     统）”。？？？
   - C-h F COMMAND *Info-goto-emacs-command-node* ：进入Info中关于
     COMMAND的节点中。
   - C-h I METHOD *describe-input-method* ：描述输入法。
   - C-h K KEY *Info-goto-emacs-key-command-node* ：进入Info中关于快捷
     键KEY的节点。
   - C-h L LANGUAGE-ENV *describe-language-enviroment* ：描述
     LANGUAGE-ENV的编码系统和输入法等。
   - C-h S SYMBOL *info-lookup-symbol* ：根据当前所处编程语言，描述
     SYMBOL的含义。
   - C-h . *display-local-help* ：如果光标在特殊文本区内，显示帮助信
     息。？？？

*** 阅读其它帮助文件（按字母顺序排序）
	- C-h C-c *describe-copy* ：阅读Emacs版权信息。
	- C-h C-d *view-emacs-debugging* ：阅读Debug Emacs的信息。
	- C-h C-f *view-emacs-FAQ* ：阅读Emacs的FAQ。
	- C-h g *describe-gnu-project* ：阅读GNU项目信息。
	- C-h C-m *view-order-manuals* ：？？？
	- C-h C-n *view-emacs-new* ：当前版本的新特性。
	- C-h C-o *descrive-distribution* ：如何下载最新版本的Emacs和其它
      GNU软件。
	- C-h C-p *view-emacs-problems* ：显示已知的Emacs问题。
	- C-h C-t *view-emacs-todo* ：Emacs着手添加的功能。
	- C-h C-w *describe-no-warranty* ：？？？
* 标记（mark）和区域（region）
  Emacs一些命令针对文本区域，要选中文本区域需首先mark一个端点，然后再
  移动光标，光标与mark间的的区域即文本区域。

  当mark一个点后，可认为文本被激活（activated）；当mark被激活后，也可
  认为文本区域被激活，此时激活的文本区域会高亮。

  当文本被激活后，除光标移动的命令外（如插入字符），文本区域激活会被取
  消；也可使用C-g命令去激活（deactivation）手动去除。

  mark只在当前buffer中有效，在不同buffer中来回移动时，回到原来buffer，
  前面设置的mark依然存在。如果多个窗口显示的是统一buffer，每个窗口的光
  标和选中区域独立,如需同时高亮,可设置变量
  *highlight-noselected-window*。

** 设置标记
   - *set-mark-command* C-@或C-<SPAC>：设置mark并激活。

	 /我的系统(kali)上C-<Shift>-<SPAC>才等价于C-<SPAC>。/

   - *exchage-point-ant-mark* C-x C-x ：设置mark并激活，再将光标移动到
     原来的mark上。

   选中文本后，就可使用相应命令对其操作，如C-x C-u *upcase-region* 将
   选中文本前部转换为大写。大多数对文本区域操作的命令结束后，都会自动
   区激活mark。

   mark还可用来记住位置，如在某点mark后再想回到该点，可使用C-u C-@命令。

** 块标记
   - *mark-word* M-@：标记单词。

	 可跟参数N，表示单词数量，如果为负数，则向后标记。

   - *mark-sexp* C-M-@：标记表达式。
   - *mark-paragraph* M-h：标记所在段落。
   - *mark-defun* C-M-h：标记defun。
   - *mark-page* C-x C-p：标记整页。
   - *mark-whole-buffer* C-x h：标记整个buffer。

** 使用区域
   对选中文本的操作可以有：
   - *kill-region* C-w：剪切文本。
   - *kill-ring-save* M-w：复制文本。
   - *downcase-region* C-x C-l：转换为小写。
   - *uppercase-region* C-x C-u：转换为大写。
   - C-u C-/：返回文本块内的操作。
   - *ispell-word* M-$：检查拼写。
   - *eval-region* ：作为lisp代码运行。
   - *copy-to-register* C-x r s：保存到寄存器。？？？
   - 保存到另外的buffer或文件中。

   其中一些命令在有选中文本和无选中文本时有区别，如M-$检查拼写，如果无
   选中文本，默认是检查光标所在处单词。如果无选择文本（mark和point在同
   一点）时，这些命令会使用默认操作，可通过设置变量
   *use-empty-active-region* 改变此行为。

** 存储标记的循环（mark ring）
   每个打开的buffer都有一个mark ring来存储所有mark。

   - C-<SPC> C-<SPC>：将当前位置mark，并push到mark ring中。

	 此功能可用来记录不同位置，还不会高亮。第一个C-<SPC>相当于mark，第
     二个则是deactivate。

   - C-u C-<SPC>：在各个mark间跳转。

	 如果当前mark处于激活状态，去激活。

	 如果将变量 *set-mark-command-repeat-pop* 为nil值，在使用C-u
     C-<SPC>循环到下一个mark后，可使用C-<SPC>再循环到下一个mark。

   设置变量 *mark-ring-max* 可控制单个buffer中最大的mark数量，默认值为16。
** 全局标记循序
   当mark被添加到mark ring后，实际上同时也被添加到了变量
   *global-mark-ring* 中。可使用命令 *pop-global-mark* C-x C-<SPC>命令
   在不同buffer中来回移动。

   可设置变量 *global-mark-ring-max* 控制全局mark数量，默认值为16。

** 使用Shift键选中区域
** 禁用高亮选中区域（diable Transient Mark）

   还没遇到禁用的场景，暂时不管。
* 剪切（kill）和移动文本
* 寄存器（registers）
* 显示控制
* 搜索和替换
* 修改输入的命令
  # -------------------------- *intermediate-level特点*
* 按键宏
* 文件操作
* 使用多个buffer
* 多窗口
* Frams和图形显示
* 字符设置国际化
  # -------------------------- *需要时阅读*
* Major和Minor模式
* 缩进
* 非编程文本相关命令
* 程序编辑
* 程序编译和测试
* 大型程序维护
* Abrrevs
* Dired -- 文件夹编辑
* 日历和日记
* 发送邮件
* 使用Rmail阅读邮件
* 其他命令
* 插件（package）管理
* 定制
* 常见问题排查
  # --------------------------- *附录*
* 附录C：Emacs命令行启动参数